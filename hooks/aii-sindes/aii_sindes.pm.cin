################################################################################
# This is '@SELF@', a @NAME@'s file
################################################################################
#
# VERSION:    @VERSION@, @DATE@
# AUTHOR:     @AUTHOR@
# MAINTAINER: @MAINTAINER@
# LICENSE:    @LICENSE@
#
################################################################################
# Coding style: emulate <TAB> characters with 4 spaces, thanks!
################################################################################
# File: @COMP@.pm
# Implementation of ncm-@COMP@
# Author: @AUTHOR@
# Version: @VERSION@ : @DATE@
# @MSG@
#
# Note: all methods in this component are called in a
# $self->$method ($config) way, unless explicitly stated.

package NCM::Component::aii_sindes;

use strict;
use warnings;
use NCM::Component::ks qw (ksinstall_rpm);
use LWP::UserAgent;

sub new
{
	my $class = shift;
	return bless {}, $class;
}


use LC::Process qw(output);

sub err
{
    my $msg = shift || "ERROR but no message\n";
    my $ex = shift || 1;
    print "aii_sindes: error: $msg\n";
    return 0 if $ex;
}

sub inf
{
    my $msg = shift || "INFO but no message\n";
    print "aii_sindes: info: $msg\n";
}

sub run_sindessh 
{
    my $cmd = shift || "acl -print";

    #run command
    my $std=output("su","-","sindes","-c", "$cmd");
    if ($?) {
        err("ERROR (exitcode $?): $std");
    } else {
        return $std;
    }
}

sub get_sindes_name
{
    ## return sindesname
    ## domainname can be fetched from profile
    ## better to take it from config file
    my $long_host = shift || err("No hostname defined.");
    my $domain = shift || "/etc/sindes/sindesrc";
    
    if ($domain =~ m/^\//) {
        ## It's a file, lets assume it's in SINDESRC format
        open F,$domain || err("Can't open file $domain: $!.");
        my $found=0;
        while(<F>) {
            $found=$1 if(m/^\s*domain\s*=\s*(\S+)/);        
        };
        close(F);
        if ($found) {
            $domain=$found;
            $domain="" if($found eq "\"\"");
        } else {
            err("Couldn't get domain from file $domain.\n");
        };
    };

    ## $domain is a domain now.
    my $short_host = $long_host; 
    my $reg = ".$domain\$";
    $reg =~ s/^\.\././;
    $short_host =~ s/$reg//;

    if ($domain eq "") {
        return $short_host;
    } elsif ($short_host eq $long_host) {
        err("Hostname $long_host doesn't match domainname.");
    } else {
        return $short_host;
    };
    err("End of get_sindes_name. You should not get here");
    
};

sub set_acl
{
    my $host = shift;
    my $window = shift || 2000;
    my $shost=get_sindes_name($host);
    my $cmd ="acl -set -grant -length $window -target $shost";
    run_sindessh($cmd);
    $cmd="acl -print -target $shost";
    my $res=run_sindessh($cmd);
    if ($res) {
        my $reg='\s*'.$shost.'\s+\d+:\d+\s+YES';
        my @vals=split("\n",$res);
        my $found=0;
        foreach (@vals) {
            $found=1 if (m/$reg/);
        }
        return 1 if ($found);
        
    };
    if (check_cert($host)) {
        inf("set_acl for host $host failed. Valid certificate found.");
        return 0;
    } else { 
        err("set_acl for host $host failed.")
    };
}

sub check_cert
{
    my $host = shift;
    my $shost=get_sindes_name($host);
    my $cmd ="cert -check -target $shost";
    my $res=run_sindessh($cmd);
    if ($res) {
        my $reg='\s*'.$shost.'\s+YES';
        my @vals=split("\n",$res);
        my $found=0;
        foreach (@vals) {
            $found=1 if (m/$reg/);
        }
        return 1 if ($found);
    };
    return 0;
}

sub revoke_cert
{
    my $host = shift;
    my $shost=get_sindes_name($host);
    if (! check_cert($host)) {
        return 1;
    }

    my $cmd ="cert -revoke -target $shost";
    my $res=run_sindessh($cmd);

    if (check_cert($host)) {
        err("Certificate revocation failed for host $host:$res");
    } else {
        return 1;
    };
}


##
## PXE
##

sub boot 
{
    my ($self, $cfg, $path) = @_;

    my $h = $cfg->getElement ('/system/network/hostname')->getValue;
    my $d = $cfg->getElement ('/system/network/domainname')->getValue;

    my $th = $cfg->getElement ($path)->getTree;

    my $fqdn = "$h.$d";
    
    my $window = 2000;
    $window = $th->{window} if ($th->{window});
    
    set_acl($fqdn,$window);
    
}

sub remove 
{
    my ($self, $cfg, $path) = @_;

    my $h = $cfg->getElement ('/system/network/hostname')->getValue;
    my $d = $cfg->getElement ('/system/network/domainname')->getValue;

    my $th = $cfg->getElement ($path)->getTree;

    my $fqdn = "$h.$d";
    
    my $run = 1;
    $run = $th->{revoke} if (exists($th->{revoke}));
    
    revoke_cert($fqdn) if ($run);
    
}


##
## KS
##
sub post_reboot
{
	my ($self, $config, $path) = @_;

    my $base = "/software/components/sindes_getcert";

	my $th = $config->getElement ($base)->getTree;

	my @rpmlist = ('SINDES-client', $th->{ca_cert_rpm});
	
	print <<EOS;


#--------------------------------------------------------------------------
# SINDES-begin
#--------------------------------------------------------------------------

##
## TODO
##
## fix the date on the nodes
## otherwise possible errors like
##
## Preparing...                ##################################################
## SINDES-client               ##################################################
## make: Warning: File 'Makefile.crt' has modification time 1.7e+08 s in the futureMakefile.crt    ... Skipped
## make: warning:  Clock skew detected.  Your build may be incomplete.
##

##
## install needed SINDES rpms
## curl installation is handled through /software/components/aii/osinstall/options/packages for dependency problems
##

EOS
	
	## use ksinstall_rpm
    ksinstall_rpm($config,@rpmlist);
    
	## it's necessary that the connection between client and CA is direct. 
	## therefore, extra routes might be necessary
	## all routes are of type host (there should only be one)
	
	if (exists($th->{aii_gw})) {
	    print "## setup direct route to sindes server\n";
		print "route add -host $th->{server} gw $th->{aii_gw}\n";
		print "sleep 10\n";
	};

	## generate the SINDES get-cert config file
	print <<EOS;
cat \> /etc/sindes/get-cert.conf \<\<EOF
 	
# Https server
HTTP_SEL="$th->{protocol}"
HTTPS_SERVER="$th->{server}"
	
RENEW_CERT_PORT=$th->{renew_cert_port}
NEW_CERT_PORT=$th->{new_cert_port}

#domain name, to be removed from the hostname if it's a FQDN
DOMAIN_NAME="$th->{domain_name}"
	
#login/passwd for first certificate request.
# /!\ beware of chicken & egg problem here.
USER=
PASSWD=
USE_PASSWD=0


# Organisation and Unit:
CRT_O="$th->{x509_O}"
CRT_OU="$th->{x509_OU}"
	
# RSA or DSA ?
USE_RSA=1
KEY_LENGTH=1024
 	
# usefull for program that needs to key+crt in a single pem file, eg curl
CREATE_PEM=1
	
URL_NEW_SUFFIX="/newcert/"
URL_RENEW_SUFFIX="/renewcert/"
 	
OPENSSL=openssl
CURL=curl
##CA_CERT_FILE="$th->{cert_dir}/$th->{ca_cert}"
CA_CERT_DIR="$th->{cert_dir}"
 	
# if USE_TMP_FILES != "" then 5 following var will
TMP_DIR=/var/tmp/get-crt-XXXXXX
 	
CRT_FILE="client.crt"
PEM_FILE="client_test.pem"
TMP_CONFIG="client.ssl.config"
KEY_FILE="client.key"
CSR_FILE="client.csr"
	
# do we install the resulting certificate?
# if so, where? (=-1 indicates we don't want to install this one)
INSTALL_DIR=$th->{cert_dir}
CLIENT_CERTIFICATE_PEM=$th->{cert_dir}/$th->{client_cert}
CLIENT_PRIVATE_KEY_PEM=$th->{cert_dir}/$th->{client_key}
CLIENT_CERTIFICATE_KEY_PEM=$th->{cert_dir}/$th->{client_cert_key}
 	
# this one should not be set as ca is _constant_, it should come from an RPM
CA_CERTIFICATE_PEM=-1
 	
# if true, will try to overwrite already existing files /!\ dangerous!
INSTALL_OVERWRITE=0
	
EOF
	

### get certificate
sindes-get-certificate

#--------------------------------------------------------------------------
# SINDES-end
#--------------------------------------------------------------------------
 		
EOS

}

1;
